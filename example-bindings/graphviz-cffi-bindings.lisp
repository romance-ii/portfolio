;;; Generated by Verrazano 0.5
;;; WARNING: This is a generated file, editing it is unwise!

(cl:in-package :cl-user)
(asdf:operate 'asdf:load-op :verrazano-runtime)
(DEFPACKAGE :GRAPHVIZ-CFFI-BINDINGS (:USE :CFFI) (:NICKNAMES)
            (:EXPORT "AGNXTEDGE" "AGFSTIN" "AGMEMREAD" "AGINDEX" "GV-TOGGLE" "GV-PARSE-ARGS"
             "AGREADLINE" "GV-RENDER-JOBS" "BOXN" "SIDEMASK" "NP" "NB" "PATHEND-T" "AGOPEN"
             "AGFSTEDGE" "AGREAD" "GV-NEW-CONTEXT" "T0" "K" "TFACT" "C" "UNSCALED" "NUM-ITERS"
             "USE-NEW" "USE-GRID" "FDP-PARMS-T" "AGERRORF" "AGNXTNODE" "AGWARNINGF" "AGXSET"
             "BOXES" "NBOX" "LRPP" "LLPP" "URPP" "ULPP" "END" "START" "AGFINDSUBG" "AGINSERT"
             "AGEDGE" "AGCOPYATTR" "SPLINESF" "LR" "FLD" "LP" "N-FLDS" "B" "FIELD-T" "AGERR"
             "AGNEDGES" "GV-FREE-LAYOUT" "AGFSTOUT" "GVLAYOUT-FEATURES-T" "AGSAFESET" "AGUSERGRAPH"
             "AGSETFILE" "AGNNODES" "AGINITLIB" "SPLINE-MERGE" "SWAP-ENDS" "SPLINE-INFO"
             "AGRAPHATTR" "GV-LAYOUT" "AGSTRDUP-HTML" "AGCLOSE" "ATTACH-ATTRS" "AGCONTAINS"
             "GV-RENDER" "AGNODEATTR" "GV-USERNAME" "STROKES" "NSTROKES" "SHAPE-T" "NVERTICES"
             "STROKE-T" "AGLASTERR" "AGDELETE" "AGERRORS" "GV-FREE-CONTEXT" "AGEDGEATTR"
             "AGFINDEDGE" "AGFINDATTR" "ATTRSYM-T" "AGSTRFREE" "AGSTRCANON" "BEZIERF" "AGERRNO"
             "AGNXTIN" "AGCANONICAL" "LIMIT" "STORE" "NODEQUEUE" "AGNXTOUT" "S" "A" "INSIDE-T"
             "ANONYMOUS%INSIDE-T/S" "R" "ANONYMOUS%INSIDE-T/A" "GV-LAYOUT-JOBS" "AGLSTNODE" "AGSET"
             "AGWRITE" "AGGET" "AGSTRDUP" "AGNODE" "GV-RENDER-FILENAME" "AGPRVNODE" "AGPROTOGRAPH"
             "AGFSTNODE" "AGFINDNODE" "AGHTMLSTR" "GETS-F" "AGREAD-USERGETS" "AGERRLEVEL-T"
             "AGSETERR" "AGXGET" "GV-NEXT-INPUT-GRAPH" "AGSUBG" "PROTO" "META-NODE" "ROOT"
             "OUTEDGES" "INEDGES" "NODES" "UNIV" "EXACT-RANKSEP" "LABEL-POS" "SET-TYPE" "INSTALLED"
             "EXPANDED" "RANKLEADER" "LEADER" "RN" "LN" "RANKSEP" "NODESEP" "CLUSTER-WAS-COLLAPSED"
             "HAS-FLAT-EDGES" "MAXRANK" "MINRANK" "N-NODES" "MAXSET" "MINSET" "COMP" "NLIST"
             "N-CLUSTER" "NDIM" "T" "SUM-T" "SPRING" "MOVE" "NEATO-NLIST" "CLEANUP" "GVC" "FLAGS"
             "RANKDIR" "CHARSET" "HAS-IMAGES" "HAS-LABELS" "BORDER" "DRAWING" "AGRAPHINFO-T"
             "NLIST-T" "FLAT" "CACHE-NC" "VALID" "CANDIDATE" "PHT-2" "PHT-1" "HT-2" "HT-1" "AV"
             "AN" "V" "RANK-T" "DATA" "NCOLS" "NROWS" "ADJMATRIX-T" "RATIO-KIND" "CENTERED"
             "LANDSCAPE" "FILLED" "PAGE" "MARGIN" "DPI" "RATIO" "SCALE" "QUANTUM" "LAYOUT-T"
             "R-EXPAND" "R-AUTO" "R-COMPRESS" "R-FILL" "R-VALUE" "R-NONE" "RATIO-T" "E" "N"
             "AGPROTO-T" "GRAPH" "PAD" "PRIORITY" "LIM" "LOW" "PAR" "TREE-OUT" "TREE-IN" "SAVE-OUT"
             "SAVE-IN" "MVAL" "RANK" "OUTLEAF" "INLEAF" "UF-PARENT" "UF-SIZE" "CLUST" "OTHER"
             "FLAT-IN" "FLAT-OUT" "OUT" "IN" "PREV" "NEXT" "WEIGHT-CLASS" "RANKTYPE" "ONSTACK"
             "MARK" "NODE-TYPE" "HAS-PORT" "POS" "HOPS" "HEAPINDEX" "YSIZE" "XSIZE" "PINNED"
             "CLUSTNODE" "STATE" "RW" "LW" "HT" "HEIGHT" "WIDTH" "COORD" "SHAPE-INFO" "SHAPE"
             "AGNODEINFO-T" "AGRAPH-T" "GRAPH-T" "ELIST" "EDGE-T" "ID" "TAIL" "HEAD" "ATTR"
             "AGEDGE-T" "TO-VIRT" "MINLEN" "COUNT" "TREE-INDEX" "CUTVALUE" "WEIGHT" "XPENALTY"
             "CONC-OPP-FLAG" "SHOWBOXES" "PATH" "DIST" "FACTOR" "ALG" "TO-ORIG" "GUI-STATE"
             "LABEL-ONTOP" "ADJACENT" "EDGE-TYPE" "TAIL-LABEL" "HEAD-LABEL" "LABEL" "HEAD-PORT"
             "TAIL-PORT" "SPL" "AGEDGEINFO-T" "PPOLYLINE-T" "PN" "PS" "PPOLY-T" "SIDE" "ORDER"
             "CLIP" "CONSTRAINED" "DEFINED" "BP" "THETA" "PORT" "BOX" "BB" "SPLINES" "EP" "SP"
             "EFLAG" "SFLAG" "SIZE" "BEZIER" "AGNODE-T" "NODE-T" "SET" "U" "D" "P" "DIMEN"
             "FONTSIZE" "FONTCOLOR" "FONTNAME" "TEXT" "TEXTLABEL-T" "HTML" "TXT"
             "ANONYMOUS%TEXTLABEL-T/U" "HTMLLABEL-T" "NPARAS" "PARA" "ANONYMOUS%TEXTLABEL-T/U/TXT"
             "UR" "LL" "BOXF" "POINT" "USERSHAPE" "POLYGON" "FNS" "SHAPE-DESC" "VERTICES" "OPTION"
             "SKEW" "DISTORTION" "ORIENTATION" "SIDES" "PERIPHERIES" "REGULAR" "POLYGON-T" "POINTF"
             "Y" "X" "POINTF-S" "CODEFN" "PBOXFN" "INSIDEFN" "PORTFN" "FREEFN" "INITFN"
             "SHAPE-FUNCTIONS" "MAX-EDGE-ID" "MAX-NODE-ID" "GLOBATTR" "EDGEATTR" "NODEATTR"
             "NODE-DICT" "AGDATA-T" "GV-CONTEXT" "LIST" "DICT" "AGDICT-T" "FIXED" "PRINTED" "INDEX"
             "VALUE" "NAME" "AGSYM-T" "+POINTS-PER-INCH+" "+STROKE-CLOSED+" "+STROKE-FILLED+"
             "+STROKE-PENDOWN+" "+STROKE-VERTICES-ALLOCATED+" "+GUI-STATE-ACTIVE+"
             "+GUI-STATE-SELECTED+" "+GUI-STATE-VISITED+" "+GUI-STATE-DELETED+" "+TAIL-ID+"
             "+HEAD-ID+" "+AGFLAG-DIRECTED+" "+AGFLAG-STRICT+" "+AGFLAG-METAGRAPH+" "+AGRAPH+"))

(in-package :GRAPHVIZ-CFFI-BINDINGS)

(cl:defconstant +agraph+ 0)
(cl:defconstant +agflag-metagraph+ 4)
(cl:defconstant +agflag-strict+ 2)
(cl:defconstant +agflag-directed+ 1)
(cl:defconstant +head-id+ "headport")
(cl:defconstant +tail-id+ "tailport")
(cl:defconstant +gui-state-deleted+ 8)
(cl:defconstant +gui-state-visited+ 4)
(cl:defconstant +gui-state-selected+ 2)
(cl:defconstant +gui-state-active+ 1)
(cl:defconstant +stroke-vertices-allocated+ 8)
(cl:defconstant +stroke-pendown+ 4)
(cl:defconstant +stroke-filled+ 2)
(cl:defconstant +stroke-closed+ 1)
(cl:defconstant +points-per-inch+ 72)
(cffi:defcstruct agsym-t
  (name :pointer)
  (value :pointer)
  (index :int)
  (printed :unsigned-char)
  (fixed :unsigned-char))

(cffi:defcstruct agdict-t
  (name :pointer)
  (dict :pointer)
  (list :pointer))

(cffi:defcfun ("gvContext" gv-context) :pointer)

(cffi:defcstruct agdata-t
  (node-dict :pointer)
  (nodeattr :pointer)
  (edgeattr :pointer)
  (globattr :pointer)
  (max-node-id :int)
  (max-edge-id :int))

(cffi:defcstruct shape-functions
  (initfn :pointer)
  (freefn :pointer)
  (portfn :pointer)
  (insidefn :pointer)
  (pboxfn :pointer)
  (codefn :pointer))

(cffi:defcstruct pointf-s
  (x :double)
  (y :double))

(cffi::defctype* pointf pointf-s)

(cffi:defcstruct polygon-t
  (regular :int)
  (peripheries :int)
  (sides :int)
  (orientation :double)
  (distortion :double)
  (skew :double)
  (option :int)
  (vertices :pointer))

(cffi:defcstruct shape-desc
  (name :pointer)
  (fns :pointer)
  (polygon :pointer)
  (usershape :char))

(cffi:defcstruct point
  (x :int)
  (y :int))

(cffi:defcstruct boxf
  (ll pointf)
  (ur pointf))

(cffi:defcstruct anonymous%textlabel-t/u/txt
  (para :pointer)
  (nparas :short))

(cffi:defcstruct htmllabel-t
  )

(cffi:defcunion anonymous%textlabel-t/u
  (txt anonymous%textlabel-t/u/txt)
  (html :pointer))

(cffi:defcstruct textlabel-t
  (text :pointer)
  (fontname :pointer)
  (fontcolor :pointer)
  (fontsize :double)
  (dimen pointf)
  (p point)
  (d pointf)
  (u anonymous%textlabel-t/u)
  (set :char)
  (html :char))

(cffi::defctype* node-t agnode-t)

(cffi:defcstruct bezier
  (list :pointer)
  (size :int)
  (sflag :int)
  (eflag :int)
  (sp point)
  (ep point))

(cffi:defcstruct splines
  (list :pointer)
  (size :int)
  (bb boxf))

(cffi:defcstruct box
  (ll point)
  (ur point))

(cffi:defcstruct port
  (p point)
  (theta :double)
  (bp :pointer)
  (defined :char)
  (constrained :char)
  (clip :char)
  (order :unsigned-char)
  (side :unsigned-char))

(cffi:defcstruct ppoly-t
  (ps :pointer)
  (pn :int))

(cffi::defctype* ppolyline-t ppoly-t)

(cffi:defcstruct agedgeinfo-t
  (spl :pointer)
  (tail-port port)
  (head-port port)
  (label :pointer)
  (head-label :pointer)
  (tail-label :pointer)
  (edge-type :char)
  (adjacent :char)
  (label-ontop :char)
  (gui-state :unsigned-char)
  (to-orig :pointer)
  (alg :pointer)
  (factor :double)
  (dist :double)
  (path ppolyline-t)
  (showboxes :unsigned-char)
  (conc-opp-flag :char)
  (xpenalty :short)
  (weight :int)
  (cutvalue :int)
  (tree-index :int)
  (count :short)
  (minlen :unsigned-short)
  (to-virt :pointer))

(cffi:defcstruct agedge-t
  ;;; Skipping field #<FIELD tag> in #<STRUCT Agedge_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  ;;; Skipping field #<FIELD printkey> in #<STRUCT Agedge_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  ;;; Skipping field #<FIELD handle> in #<STRUCT Agedge_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  (padding1 :int) ;; generated to pad 32 bits of skipped bitfield typed fields
  (attr :pointer)
  (head :pointer)
  (tail :pointer)
  (id :int)
  (u agedgeinfo-t))

(cffi::defctype* edge-t agedge-t)

(cffi:defcstruct elist
  (list :pointer)
  (size :int))

(cffi::defctype* graph-t agraph-t)

(cffi:defcstruct agnodeinfo-t
  (shape :pointer)
  (shape-info :pointer)
  (coord point)
  (width :double)
  (height :double)
  (bb boxf)
  (ht :int)
  (lw :int)
  (rw :int)
  (label :pointer)
  (alg :pointer)
  (state :char)
  (gui-state :unsigned-char)
  (clustnode :char)
  (pinned :unsigned-char)
  (xsize :short)
  (ysize :short)
  (id :int)
  (heapindex :int)
  (hops :int)
  (pos :pointer)
  (dist :double)
  (showboxes :unsigned-char)
  (has-port :char)
  (node-type :char)
  (mark :char)
  (onstack :char)
  (ranktype :char)
  (weight-class :char)
  (next :pointer)
  (prev :pointer)
  (in elist)
  (out elist)
  (flat-out elist)
  (flat-in elist)
  (other elist)
  (clust :pointer)
  (uf-size :int)
  (uf-parent :pointer)
  (inleaf :pointer)
  (outleaf :pointer)
  (rank :int)
  (order :int)
  (mval :int)
  (save-in elist)
  (save-out elist)
  (tree-in elist)
  (tree-out elist)
  (par :pointer)
  (low :int)
  (lim :int)
  (priority :int)
  (pad :double :count 1))

(cffi:defcstruct agnode-t
  ;;; Skipping field #<FIELD tag> in #<STRUCT Agnode_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  ;;; Skipping field #<FIELD pad> in #<STRUCT Agnode_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  ;;; Skipping field #<FIELD handle> in #<STRUCT Agnode_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  (padding2 :int) ;; generated to pad 32 bits of skipped bitfield typed fields
  (attr :pointer)
  (name :pointer)
  (id :int)
  (graph :pointer)
  (u agnodeinfo-t))

(cffi:defcstruct agproto-t
  (n :pointer)
  (e :pointer)
  (prev :pointer))

(cffi:defcenum ratio-t
  (:r-none 0)
  (:r-value 1)
  (:r-fill 2)
  (:r-compress 3)
  (:r-auto 4)
  (:r-expand 5))

(cffi:defcstruct layout-t
  (quantum :double)
  (scale :double)
  (ratio :double)
  (dpi :double)
  (margin point)
  (page point)
  (size point)
  (filled :char)
  (landscape :char)
  (centered :char)
  (ratio-kind ratio-t))

(cffi:defcstruct adjmatrix-t
  (nrows :int)
  (ncols :int)
  (data :pointer))

(cffi:defcstruct rank-t
  (n :int)
  (v :pointer)
  (an :int)
  (av :pointer)
  (ht-1 :int)
  (ht-2 :int)
  (pht-1 :int)
  (pht-2 :int)
  (candidate :char)
  (valid :char)
  (cache-nc :int)
  (flat :pointer))

(cffi:defcstruct nlist-t
  (list :pointer)
  (size :int))

(cffi:defcstruct agraphinfo-t
  (drawing :pointer)
  (label :pointer)
  (bb box)
  (border point :count 4)
  (gui-state :unsigned-char)
  (has-labels :unsigned-char)
  (has-images :char)
  (charset :unsigned-char)
  (rankdir :int)
  (ht-1 :int)
  (ht-2 :int)
  (flags :unsigned-short)
  (alg :pointer)
  (gvc :pointer)
  (cleanup :pointer)
  (neato-nlist :pointer)
  (move :int)
  (dist :pointer)
  (spring :pointer)
  (sum-t :pointer)
  (t :pointer)
  (ndim :int)
  (n-cluster :int)
  (clust :pointer)
  (nlist :pointer)
  (rank :pointer)
  (comp nlist-t)
  (minset :pointer)
  (maxset :pointer)
  (n-nodes :long)
  (minrank :short)
  (maxrank :short)
  (has-flat-edges :char)
  (showboxes :unsigned-char)
  (cluster-was-collapsed :char)
  (nodesep :int)
  (ranksep :int)
  (ln :pointer)
  (rn :pointer)
  (leader :pointer)
  (rankleader :pointer)
  (expanded :char)
  (installed :char)
  (set-type :char)
  (label-pos :char)
  (exact-ranksep :char))

(cffi:defcstruct agraph-t
  ;;; Skipping field #<FIELD tag> in #<STRUCT Agraph_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  ;;; Skipping field #<FIELD kind> in #<STRUCT Agraph_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  ;;; Skipping field #<FIELD handle> in #<STRUCT Agraph_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  (padding3 :int) ;; generated to pad 32 bits of skipped bitfield typed fields
  (attr :pointer)
  (name :pointer)
  (univ :pointer)
  (nodes :pointer)
  (inedges :pointer)
  (outedges :pointer)
  (root :pointer)
  (meta-node :pointer)
  (proto :pointer)
  (u agraphinfo-t))

(cffi:defcfun ("agsubg" agsubg) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("gvNextInputGraph" gv-next-input-graph) :pointer (gvc :pointer))

(cffi:defcfun ("agxget" agxget) :pointer (arg1 :pointer) (arg2 :int))

(cffi:defcfun ("agseterr" agseterr) :void (arg1 agerrlevel-t))

(cffi:defcfun ("agread_usergets" agread-usergets) :pointer (arg1 :pointer) (arg2 gets-f))

(cffi:defcfun ("aghtmlstr" aghtmlstr) :int (s :pointer))

(cffi:defcfun ("agfindnode" agfindnode) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agfstnode" agfstnode) :pointer (arg1 :pointer))

(cffi:defcfun ("agprotograph" agprotograph) :pointer)

(cffi:defcfun ("agprvnode" agprvnode) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("gvRenderFilename" gv-render-filename) :int (gvc :pointer) (g :pointer)
                                                           (format :pointer) (filename :pointer))

(cffi:defcfun ("agnode" agnode) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agstrdup" agstrdup) :pointer (arg1 :pointer))

(cffi:defcfun ("agget" agget) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agwrite" agwrite) :int (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agset" agset) :int (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi:defcfun ("aglstnode" aglstnode) :pointer (arg1 :pointer))

(cffi:defcfun ("gvLayoutJobs" gv-layout-jobs) :int (gvc :pointer) (g :pointer))

(cffi:defcstruct anonymous%inside-t/a
  (p :pointer)
  (r :pointer))

(cffi:defcstruct anonymous%inside-t/s
  (n :pointer)
  (bp :pointer))

(cffi:defcunion inside-t
  (a anonymous%inside-t/a)
  (s anonymous%inside-t/s))

(cffi:defcfun ("agnxtout" agnxtout) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcstruct nodequeue
  (store :pointer)
  (limit :pointer)
  (head :pointer)
  (tail :pointer))

(cffi:defcfun ("agcanonical" agcanonical) :pointer (arg1 :pointer))

(cffi:defcfun ("agnxtin" agnxtin) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcvar ("agerrno" agerrno) agerrlevel-t)

(cffi:defcstruct bezierf
  (list :pointer)
  (size :int)
  (sflag :int)
  (eflag :int)
  (sp pointf)
  (ep pointf))

(cffi:defcfun ("agstrcanon" agstrcanon) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agstrfree" agstrfree) :void (arg1 :pointer))

(cffi::defctype* attrsym-t agsym-t)

(cffi:defcfun ("agfindattr" agfindattr) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agfindedge" agfindedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi:defcfun ("agedgeattr" agedgeattr) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi:defcfun ("gvFreeContext" gv-free-context) :int (gvc :pointer))

(cffi:defcfun ("agerrors" agerrors) :int)

(cffi:defcfun ("agdelete" agdelete) :void (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("aglasterr" aglasterr) :pointer)

(cffi:defcstruct stroke-t
  (nvertices :int)
  (flags :int)
  (vertices :pointer))

(cffi:defcstruct shape-t
  (nstrokes :int)
  (strokes :pointer))

(cffi:defcfun ("gvUsername" gv-username) :pointer)

(cffi:defcfun ("agnodeattr" agnodeattr) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi:defcfun ("gvRender" gv-render) :int (gvc :pointer) (g :pointer) (format :pointer)
                                          (out :pointer))

(cffi:defcfun ("agcontains" agcontains) :int (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("attach_attrs" attach-attrs) :void (g :pointer))

(cffi:defcfun ("agclose" agclose) :void (arg1 :pointer))

(cffi:defcfun ("agstrdup_html" agstrdup-html) :pointer (s :pointer))

(cffi:defcfun ("gvLayout" gv-layout) :int (gvc :pointer) (g :pointer) (engine :pointer))

(cffi:defcfun ("agraphattr" agraphattr) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi:defcstruct spline-info
  (swap-ends :pointer)
  (spline-merge :pointer))

(cffi:defcfun ("aginitlib" aginitlib) :void (arg1 :int) (arg2 :int) (arg3 :int))

(cffi:defcfun ("agnnodes" agnnodes) :int (arg1 :pointer))

(cffi:defcfun ("agsetfile" agsetfile) :void (arg1 :pointer))

(cffi:defcfun ("agusergraph" agusergraph) :pointer (arg1 :pointer))

(cffi:defcfun ("agsafeset" agsafeset) :int (arg1 :pointer) (arg2 :pointer) (arg3 :pointer)
                                           (arg4 :pointer))

(cffi:defcstruct gvlayout-features-t
  (flags :int))

(cffi:defcfun ("agfstout" agfstout) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("gvFreeLayout" gv-free-layout) :int (gvc :pointer) (g :pointer))

(cffi:defcfun ("agnedges" agnedges) :int (arg1 :pointer))

(cffi:defcfun ("agerr" agerr) :int (level agerrlevel-t) (fmt :pointer)&rest)

(cffi:defcstruct field-t
  (size point)
  (b box)
  (n-flds :int)
  (lp :pointer)
  (fld :pointer)
  (id :pointer)
  (lr :unsigned-char)
  (sides :unsigned-char))

(cffi:defcstruct splinesf
  (list :pointer)
  (size :int))

(cffi:defcfun ("agcopyattr" agcopyattr) :int (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agedge" agedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi:defcfun ("aginsert" aginsert) :void (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agfindsubg" agfindsubg) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcstruct path
  (start port)
  (end port)
  (ulpp :pointer)
  (urpp :pointer)
  (llpp :pointer)
  (lrpp :pointer)
  (nbox :int)
  (boxes :pointer)
  (data :pointer))

(cffi:defcfun ("agxset" agxset) :int (arg1 :pointer) (arg2 :int) (arg3 :pointer))

(cffi:defcfun ("agwarningf" agwarningf) :void (fmt :pointer)&rest)

(cffi:defcfun ("agnxtnode" agnxtnode) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agerrorf" agerrorf) :void (fmt :pointer)&rest)

(cffi:defcstruct fdp-parms-t
  (use-grid :int)
  (use-new :int)
  (num-iters :int)
  (unscaled :int)
  (c :double)
  (tfact :double)
  (k :double)
  (t0 :double))

(cffi:defcfun ("gvNEWcontext" gv-new-context) :pointer (info :pointer) (user :pointer))

(cffi:defcfun ("agread" agread) :pointer (arg1 :pointer))

(cffi:defcfun ("agfstedge" agfstedge) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agopen" agopen) :pointer (arg1 :pointer) (arg2 :int))

(cffi:defcstruct pathend-t
  (nb box)
  (np point)
  (sidemask :int)
  (boxn :int)
  (boxes box :count 20))

(cffi:defcfun ("gvRenderJobs" gv-render-jobs) :int (gvc :pointer) (g :pointer))

(cffi:defcfun ("agreadline" agreadline) :void (arg1 :int))

(cffi:defcfun ("gvParseArgs" gv-parse-args) :int (gvc :pointer) (argc :int) (argv :pointer))

(cffi:defcfun ("gvToggle" gv-toggle) :void (arg1 :int))

(cffi:defcfun ("agindex" agindex) :int (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agmemread" agmemread) :pointer (arg1 :pointer))

(cffi:defcfun ("agfstin" agfstin) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agnxtedge" agnxtedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))
